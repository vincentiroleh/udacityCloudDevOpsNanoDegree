Description: >
  Vincent Iroleh / Challenge3

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  AMItoUse:
    Description: AMI to use for our base image
    Type: String

Resources:
  # IAM Role to allow EC2 Session Manager to access out server
  RoleForSSMAccess:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  # Instance Profile
  ServerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: 
        - !Ref RoleForSSMAccess
  # Security Group
  WebAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our test host
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  # Server EC2 Instance
  ServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMItoUse
      InstanceType: t2.micro
      IamInstanceProfile: !Ref ServerInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "WebAccessSecurityGroup"
          SubnetId:
            Fn::ImportValue: !Sub "${EnvironmentName}-PRI-SN"
